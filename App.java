/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task1;
import java.io.*;
import org.apache.commons.cli.*;

public class App {

static int count_integers, count_floats, count_strings;
static long min_integer, max_integer, sum_of_integers, avg_of_integers;
static int min_stringlength, max_stringlength;
static boolean file_append = false;
static File filename_integer, filename_float, filename_string;
static FileWriter file_integer, file_float, file_string;
static int stat_option;
static String[] input_files = null;
static Boolean write_error = false;

static boolean isNumeric(String str) {
	return str.matches("-?\\d+$");
}

static boolean isFloat(String str) {
	return str.matches("-?\\d\\.?\\d*(\\d+[eE][-+]?)?\\d+$");
}

static void Detect_type_of_string(String data) throws IOException {
	if(isNumeric(data)) {
		try {
			long converted_integer = Long.parseLong(data, 10);
			sum_of_integers += converted_integer;
			if ((converted_integer < min_integer) || (min_integer == 0)) min_integer = converted_integer;
			if ((converted_integer > max_integer) || (max_integer == 0)) max_integer = converted_integer;
			if (count_integers == 0) file_integer = new FileWriter(filename_integer, file_append);
			file_integer.write(data);
			file_integer.write('\n');
			file_integer.flush();
			count_integers++;
		}
		catch (NumberFormatException exception) {
			System.out.println(data + ": Integer convert error!");
		}
	}
	else if(isFloat(data)) {
		if (count_floats == 0) file_float = new FileWriter(filename_float, file_append);
		file_float.write(data);
		file_float.write('\n');
		file_float.flush();
		count_floats++;
	}
	else {
		if ((data.length() < min_stringlength) || (min_stringlength == 0)) min_stringlength = data.length();
		if ((data.length() > max_stringlength) || (max_stringlength == 0)) max_stringlength = data.length();
			if (count_strings == 0) file_string = new FileWriter(filename_string, file_append);
			file_string.write(data);
			file_string.write('\n');
			file_string.flush();
			count_strings++;
	}
}

	static void FileRead(String filename) throws IOException {
		FileReader fr = null; 
		BufferedReader br = null;
		
		try {
			fr = new FileReader(filename);
			br = new BufferedReader(fr);
		}
		catch (IOException exception) {
			System.out.print("File " + filename + " not found or read error: ");
            System.out.println(exception.getMessage());
        }
		if (fr != null) {
			String current_line;
			while((current_line = br.readLine()) != null){
				if (current_line.isEmpty()) continue;
				try {
					Detect_type_of_string(current_line);
				}
				catch (IOException exception) {
					System.out.println(exception.getMessage());
					write_error = true;
					return;
				}
			}
		}
	}
	
	static void Show_Stat() throws IOException {
		if (stat_option != 0)
		{
			System.out.println("Integers: " + count_integers);
			System.out.println("Floats: " + count_floats);
			System.out.println("Strings: " + count_strings);
		}
		if (stat_option == 2)
		{
			if (count_integers > 0) {
				System.out.println("Sum of integers: " + sum_of_integers);
				System.out.println("Avg of integers: " + sum_of_integers/count_integers);
				System.out.println("Min integer: " + min_integer);
				System.out.println("Max integer: " + max_integer);
			}
			else System.out.println("No integers (cannot show sum and avg)");
			if (count_strings > 0) {
				System.out.println("Min string length: " + min_stringlength);
				System.out.println("Max string length: " + max_stringlength);
			}
			else System.out.println("No strings (cannot show min and max length)");
		}
	}
	
	static void Close_Files() throws IOException {
		if (file_integer != null) file_integer.close();
		if (file_float != null) file_float.close();
		if (file_string != null) file_string.close();
	}
	
	static void Read_Arguments(String[] args) throws ParseException {
        Options options = new Options();
        CommandLineParser parser = new DefaultParser();
		String filename_prefix = null;
		String filename_path = null;
		options.addOption("o", true, "Output files path");
        options.addOption("p", true, "Output files name prefix");
        options.addOption("a", false, "Append data to files");
        options.addOption("s", false, "Output short statistic");
        options.addOption("f", false, "Output full statistic");
		CommandLine commandLine = parser.parse(options, args);
        if (commandLine.hasOption("o"))
        {
			System.out.print("Save file path: ");
			filename_path = commandLine.getOptionValue("o");
            System.out.println(filename_path);
        }
        if (commandLine.hasOption("p"))
        {
            System.out.print("File prefix: ");
			filename_prefix = commandLine.getOptionValue("p");
            System.out.println(filename_prefix);
        }
        if (commandLine.hasOption("a"))
        {
            System.out.println("Append option is set.");
			file_append = true;
        }
		if (commandLine.hasOption("s") && commandLine.hasOption("f"))
        {
            System.out.println("You choose both variants of stat detail. Option -f (Full stat) have priority.");
			stat_option = 2;
        }
		else if (commandLine.hasOption("s"))
        {
            System.out.println("Stat option: Short");
			stat_option = 1;
        }
		else if (commandLine.hasOption("f"))
        {
            System.out.println("Stat option: Full");
            stat_option = 2;
        }
		input_files = commandLine.getArgs();
        System.out.print("Input files: ");
        for (String argument : input_files)
        {
            System.out.print(argument + " ");
        }
        System.out.println();
		filename_integer = new File (filename_path, filename_prefix+"integer.txt");
		filename_float = new File (filename_path, filename_prefix+"float.txt");
		filename_string = new File (filename_path, filename_prefix+"string.txt");
	}
	
	public static void main(String[] args) throws IOException {
        try {
			Read_Arguments(args);
		}
		catch (ParseException exception) {
            System.out.print("Parse error: ");
            System.out.println(exception.getMessage());
        }

		if (input_files.length == 0) 
		{
			System.out.println("No input files!");
			return;
		}
		
		for (String argument : input_files) {
			if (write_error) break;
			FileRead(argument);
        }
		if (write_error) {
			System.out.println("File write error!");
			Close_Files();
			return;
		}
		
		try {
			Show_Stat();
		}
		catch (IOException exception) {
			System.out.println("Error show statistics: " + exception.getMessage());
		}
		Close_Files();
    }
}
